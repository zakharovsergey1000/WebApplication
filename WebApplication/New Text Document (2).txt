{
            using (AdvancedCalendarEntities advancedCalendarEntities = new AdvancedCalendarEntities())
            {
                using (var dbLabelTransaction = advancedCalendarEntities.Database.BeginTransaction())
                {
                    try
                    {
                        advancedCalendarEntities.Configuration.ProxyCreationEnabled = false;

                        if (!IsAuthenticated(request.Credentials))
                        {
                            dbLabelTransaction.Rollback();
                            return new SetEntityResponse(SetEntityResult.AccessDenied, null, 0, null, null, DateTime.UtcNow);
                        }

                        // now the user is authenticated

                        Tasks newEntity = null;

                        if (request.Task.TaskID != 0)
                        {
                            newEntity = advancedCalendarEntities.Tasks.Where(b => b.TaskID == request.Task.TaskID).SingleOrDefault();
                            if (newEntity == null)
                            {
                                dbLabelTransaction.Rollback();
                                return new SetEntityResponse(SetEntityResult.EntityIsNotFound, null, request.Task.TaskID, null, null, DateTime.UtcNow);
                            }
                            // Load the UserProfile related to a given EntityId 
                            advancedCalendarEntities.Entry(newEntity).Reference(p => p.UserProfile).Load();
                            if (!(newEntity.UserProfile.Username.Equals(request.Credentials.Username)))
                            {
                                dbLabelTransaction.Rollback();
                                return new SetEntityResponse(SetEntityResult.AccessDenied, null, 0, null, null, DateTime.UtcNow);
                            }
                            if (newEntity.Deleted)
                            {
                                dbLabelTransaction.Rollback();
                                return new SetEntityResponse(SetEntityResult.EntityIsDeleted, null, request.Task.TaskID, null, null, DateTime.UtcNow);
                            }
                            if (request.Task.Deleted)
                            {
                                MarkTaskAsDeleted(request.Task.TaskID);
                                advancedCalendarEntities.SaveChanges();
                                dbLabelTransaction.Commit();
                                return new SetEntityResponse(SetEntityResult.EntityIsDeleted, null, request.Task.TaskID, null, null, DateTime.UtcNow);
                            }
                            if (request.Task.LastMod < new DateTime(newEntity.LastMod.UtcTicks / 10000 * 10000, DateTimeKind.Utc))
                            {
                                dbLabelTransaction.Rollback();
                                return new SetEntityResponse(SetEntityResult.EntityOnTheServerIsNewer, null, request.Task.TaskID, newEntity.LastMod.UtcDateTime, null, DateTime.UtcNow);
                            }
                        }
                        else
                        {
                            newEntity = new Tasks();
                            advancedCalendarEntities.Tasks.Add(newEntity);
                        }

                        bool isPreviousStateCompleted = newEntity.CompletedPercent == 100;

                        Tasks parentEntity = null;

                        if (request.Task.ParentID != 0)
                        {
                            parentEntity = advancedCalendarEntities.Tasks.Where(b => b.TaskID == request.Task.ParentID).SingleOrDefault();

                            if (parentEntity == null)
                            {
                                dbLabelTransaction.Rollback();
                                return new SetEntityResponse(SetEntityResult.ParentEntityIsNotFound, null,/*"The requested parent entity was not found on the server",*/ request.Task.TaskID, null, null, DateTime.UtcNow);
                            }

                            if (parentEntity.Deleted && !request.Task.Deleted)
                            {
                                dbLabelTransaction.Rollback();
                                return new SetEntityResponse(SetEntityResult.ParentEntityIsDeleted, null,/*"The requested parent entity was deleted on the server",*/ request.Task.TaskID, null, null, DateTime.UtcNow);
                            }
                        }

                        // verify field consistency

                        if (request.Task.TaskID == 0 && request.Task.Deleted)
                        {
                            dbLabelTransaction.Rollback();
                            return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "request.Task.TaskID == 0 && request.Task.Deleted", 0, null, null, DateTime.UtcNow);
                        }

                        if (request.Task.UserName == null || request.Task.UserName.Equals(""))
                        {
                            return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "request.Task.UserName == null || request.Task.UserName.Equals(\"\")", 0, null, null, DateTime.UtcNow);
                        }

                        if (request.Task.Period == null)
                        {
                            if (request.Task.RepeatCount != null)
                            {
                                dbLabelTransaction.Rollback();
                                return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "request.Task.Period == null && request.Task.RepeatCount != null", 0, null, null, DateTime.UtcNow);
                            }
                        }
                        else if (!(request.Task.Period >= 1))
                        {
                            dbLabelTransaction.Rollback();
                            return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "request.Task.Period != null && !(request.Task.Period >= 1)", 0, null, null, DateTime.UtcNow);
                        }

                        if (request.Task.Period != null && (request.Task.StartDate == null || request.Task.StartTime == null || request.Task.EndDate == null || request.Task.EndTime == null))
                        {
                            dbLabelTransaction.Rollback();
                            return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "request.Task.Period != null && (request.Task.StartDate == null || request.Task.StartTime == null || request.Task.EndDate == null || request.Task.EndTime == null)", 0, null, null, DateTime.UtcNow);
                        }

                        // verify child parent relation consistency
                        if (request.Task.TaskID != 0 && request.Task.ParentID != 0 && request.Task.TaskID == request.Task.ParentID)
                        {
                            dbLabelTransaction.Rollback();
                            return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "Parent entity is set to the entity itself", 0, null, null, DateTime.UtcNow);
                        }

                        // verify reminders consistency
                        foreach (Remind reminder in request.Task.Reminds)
                        {
                            if (reminder.RemindAt == null && reminder.RemindOffset == null)
                            {
                                return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "reminder.RemindAt == null && reminder.RemindOffset == null", 0, null, null, DateTime.UtcNow);
                            }
                            if (reminder.RemindType == TaskRemindType.AbsoluteTime && (reminder.RemindOffset != null || reminder.RemindAt == null || reminder.RemindEachIteration))
                            {
                                return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "reminder.RemindType == TaskRemindType.AbsoluteTime && (reminder.RemindOffset != null || reminder.RemindAt == null || reminder.RemindEachIteration)", 0, null, null, DateTime.UtcNow);
                            }
                            if (reminder.RemindType == TaskRemindType.TimeSpanBeforeStart && (reminder.RemindOffset == null || reminder.RemindAt != null))
                            {
                                return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "reminder.RemindType == TaskRemindType.TimeSpanBeforeStart && (reminder.RemindOffset == null || reminder.RemindAt != null)", 0, null, null, DateTime.UtcNow);
                            }
                            if (reminder.RemindEachIteration && (reminder.RemindOffset == null || reminder.RemindAt != null))
                            {
                                return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "reminder.RemindEachIteration && (reminder.RemindOffset == null || reminder.RemindAt != null)", 0, null, null, DateTime.UtcNow);
                            }

                            // verify task and reminder consistency
                            if (request.Task.Type == TaskType.Task)
                            {
                                if (reminder.RemindEachIteration)
                                {
                                    return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "request.Task.Type == TaskType.Task && reminder.RemindEachIteration", 0, null, null, DateTime.UtcNow);
                                }
                                if (request.Task.StartDate == null && (reminder.RemindAt == null || reminder.RemindOffset != null))
                                {
                                    return new SetEntityResponse(SetEntityResult.EntityHasIncorrectData, "request.Task.Type == TaskType.Task && request.Task.StartDate == null && (reminder.RemindAt == null || reminder.RemindOffset != null)", 0, null, null, DateTime.UtcNow);
                                }
                            }
                        }

                        if (request.Task.TaskID != 0)
                        {
                            advancedCalendarEntities.Entry(newEntity).Collection(p => p.RemindList).Load();
                            //newEntity.RemindList.Clear();
                            while (newEntity.RemindList.Count > 0)
                            {
                                advancedCalendarEntities.Reminds.Remove(newEntity.RemindList.First());
                            }

                            advancedCalendarEntities.Entry(newEntity).Collection(p => p.LabelList).Load();
                            // newEntity.LabelList.Clear();
                            while (newEntity.LabelList.Count > 0)
                            {
                                advancedCalendarEntities.Labels.Remove(newEntity.LabelList.First());
                            }

                            advancedCalendarEntities.Entry(newEntity).Collection(p => p.ContactList).Load();
                            // newEntity.ContactList.Clear();
                            while (newEntity.ContactList.Count > 0)
                            {
                                advancedCalendarEntities.Contacts.Remove(newEntity.ContactList.First());
                            }

                            advancedCalendarEntities.Entry(newEntity).Collection(p => p.FileList).Load();
                            //newEntity.FileList.Clear();
                            while (newEntity.FileList.Count > 0)
                            {
                                advancedCalendarEntities.Files.Remove(newEntity.FileList.First());
                            }
                        }



                        newEntity.UserProfile = advancedCalendarEntities.UserProfiles.Where(b => b.Username.Equals(request.Task.UserName)).Single();


                        newEntity.UserName = request.Task.UserName;
                        newEntity.UserTaskID = request.Task.UserTaskID;

                        newEntity.Text = request.Task.Text;
                        newEntity.FullText = request.Task.FullText;
                        newEntity.Type = request.Task.Type;
                        newEntity.ParentID = request.Task.ParentID;
                        newEntity.StartDate = request.Task.StartDate;
                        newEntity.EndDate = request.Task.EndDate;
                        newEntity.Length = request.Task.Length;
                        newEntity.FactLength = request.Task.FactLength;
                        newEntity.Period = request.Task.Period;
                        newEntity.PeriodUnit = request.Task.PeriodUnit;
                        newEntity.Priority = request.Task.Priority;
                        newEntity.CompletedPercent = request.Task.CompletedPercent;
                        newEntity.CompletedTime = request.Task.CompletedTime;
                        newEntity.Deleted = request.Task.Deleted;
                        newEntity.SortOrder = request.Task.SortOrder;
                        newEntity.CompletedInCurrentPeriod = request.Task.CompletedInCurrentPeriod;
                        newEntity.RepeatCount = request.Task.RepeatCount;
                        newEntity.RepeatOnMonday = request.Task.RepeatOnMonday;
                        newEntity.RepeatOnTuesday = request.Task.RepeatOnTuesday;
                        newEntity.RepeatOnWednesday = request.Task.RepeatOnWednesday;
                        newEntity.RepeatOnThursday = request.Task.RepeatOnThursday;
                        newEntity.RepeatOnFriday = request.Task.RepeatOnFriday;
                        newEntity.RepeatOnSaturday = request.Task.RepeatOnSaturday;
                        newEntity.RepeatOnSunday = request.Task.RepeatOnSunday;
                        newEntity.ChainChildren = request.Task.ChainChildren;
                        newEntity.LastMod = request.Task.LastMod == null ? DateTimeOffset.UtcNow : request.Task.LastMod;
                        if (newEntity.TaskID == 0)
                        {
                            newEntity.Created = newEntity.LastMod;
                        }
                        newEntity.UID = request.Task.UID;
                        newEntity.TimezoneOffset = request.Task.TimezoneOffset;
                        newEntity.OriginalTaskID = request.Task.OriginalTaskID;
                        newEntity.IsInput = request.Task.IsInput;
                        newEntity.IsOutput = request.Task.IsOutput;
                        newEntity.EndTime = request.Task.EndTime;
                        newEntity.StartTime = request.Task.StartTime;

                        foreach (Workgroup workgroup in request.Task.Workgroups)
                        {
                            Workgroups entity2 = new Workgroups();

                            entity2.GroupID = workgroup.GroupID;
                            entity2.TaskID = workgroup.TaskID;
                            entity2.OwnerID = workgroup.OwnerID;
                            entity2.Name = workgroup.Name;
                            entity2.State = workgroup.State;

                            newEntity.WorkgroupList.Add(entity2);
                        }

                        foreach (Remind remind in request.Task.Reminds)
                        {
                            Reminds entity2 = new Reminds();

                            entity2.RemindID = remind.RemindID;
                            entity2.TaskID = remind.TaskID;
                            entity2.NotificationContactID = remind.NotificationContactID;
                            entity2.RemindAt = remind.RemindAt;
                            entity2.Sended = remind.Sended;
                            entity2.Errors = remind.Errors;
                            entity2.RemindEachIteration = remind.RemindEachIteration;
                            entity2.Text = remind.Text;
                            entity2.Enabled = remind.Enabled;
                            entity2.LastSend = remind.LastSend;
                            entity2.RemindType = remind.RemindType;
                            entity2.RemindOffset = remind.RemindOffset;
                            entity2.RemindsCount = remind.RemindsCount;
                            entity2.PrepayedSmsCount = remind.PrepayedSmsCount;
                            entity2.Deleted = remind.Deleted;
                            entity2.SendsCount = remind.SendsCount;
                            entity2.SmsCreditsError = remind.SmsCreditsError;
                            entity2.IsAlarm = remind.IsAlarm;

                            newEntity.RemindList.Add(entity2);
                        }

                        List<EntityData> NotFoundRelatedEntities = new List<EntityData>();
                        foreach (int entityId in request.Task.Contacts)
                        {
                            Contacts entity2 = advancedCalendarEntities.Contacts.Where(b => b.ContactID == entityId && b.UserProfile.Username.Equals(request.Task.UserName)).SingleOrDefault();
                            if (entity2 != null)
                            {
                                newEntity.ContactList.Add(entity2);
                            }
                            else
                            {
                                NotFoundRelatedEntities.Add(new EntityData(entity2.ContactID, EntityType.Contact));
                            }
                        }

                        foreach (int entityId in request.Task.Labels)
                        {
                            Labels entity2 = advancedCalendarEntities.Labels.Where(b => b.LabelID == entityId && b.UserProfile.Username.Equals(request.Task.UserName)).SingleOrDefault();
                            if (entity2 != null)
                            {
                            }
                            else
                            {
                                NotFoundRelatedEntities.Add(new EntityData(entity2.LabelID, EntityType.Label));
                            }
                        }

                        foreach (int entityId in request.Task.Files)
                        {
                            Files entity2 = advancedCalendarEntities.Files.Where(b => b.FileID == entityId && b.UserProfile.Username.Equals(request.Task.UserName)).SingleOrDefault();
                            if (entity2 != null)
                            {
                                newEntity.FileList.Add(entity2);
                            }
                            else
                            {
                                NotFoundRelatedEntities.Add(new EntityData(entity2.FileID, EntityType.File));
                            }
                        }

                        // adjust completed state on the subtree
                        if (request.Task.TaskID != 0)
                        {
                            if (request.Task.CompletedPercent == 100)
                            {
                                List<TaskTreeNode> taskTree = getTaskTree(advancedCalendarEntities, request.Task.TaskID, true, true, true, true);

                                // If completed set completed on the nodes of the subtree

                                for (int i = 1; i < taskTree.Count; i++)
                                {
                                    if (taskTree[i].Node.CompletedPercent < 100)
                                    {
                                        taskTree[i].Node.CompletedPercent = 100;
                                        taskTree[i].Node.LastMod = DateTimeOffset.UtcNow;
                                    }
                                }
                            }
                            else
                            {
                                if (isPreviousStateCompleted)
                                {
                                    int nextId = request.Task.ParentID;
                                    while (nextId != 0)
                                    {
                                        Tasks entity2 = advancedCalendarEntities.Tasks.Where(b => b.TaskID == nextId).Single();
                                        if (entity2.CompletedPercent < 100)
                                        {
                                            break;
                                        }
                                        entity2.CompletedPercent = 0;
                                        entity2.LastMod = DateTimeOffset.UtcNow;
                                        nextId = entity2.ParentID;
                                    }
                                }
                            }
                        }

                        advancedCalendarEntities.SaveChanges();

                        dbLabelTransaction.Commit();

                        return new SetEntityResponse(SetEntityResult.Saved, null, newEntity.TaskID, newEntity.LastMod.UtcDateTime, NotFoundRelatedEntities.Count == 0 ? null : NotFoundRelatedEntities, DateTime.UtcNow);
                    }
                    catch (Exception e )
                    {
                        dbLabelTransaction.Rollback();
                        throw e;
                    }
                }
            }
        }